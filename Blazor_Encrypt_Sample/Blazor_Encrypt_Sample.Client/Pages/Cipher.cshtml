@*Copyright (c) <2018>
    <copyright holders>
    <Name>Alaa Ben Fatma</Alaa>
    <Url>https://github.com/alaabenfatma</Url>
    </copyright holders>

        Permission is hereby granted, free of charge, to any person obtaining a copy of this
        software and associated documentation files (the "Software"), to deal in the Software
        without restriction, including without limitation the rights to use, copy, modify, merge,
        publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
        to whom the Software is furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in all copies or
        substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
        INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
        PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
        FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
        DEALINGS IN THE SOFTWARE.*@
@page "/Cipher"

<il>Enter your string:<input @bind(value) placeholder="..." /></il>
<div>
    <style>
        .button {
            display: inline-block;
            border-radius: 4px;
            background-color: #f4511e;
            border: none;
            color: #FFFFFF;
            text-align: center;
            font-size: 14px;
            padding: 20px;
            width: 100px;
            transition: all 0.5s;
            cursor: pointer;
            margin: 5px;
        }

            .button span {
                cursor: pointer;
                display: inline-block;
                position: relative;
                transition: 0.5s;
            }

                .button span:after {
                    content: "\00bb";
                    position: absolute;
                    opacity: 0;
                    top: 0;
                    right: -20px;
                    transition: 0.5s;
                }

            .button:hover span {
                padding-right: 25px;
            }

                .button:hover span:after {
                    opacity: 1;
                    right: 0;
                }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: lightgray
        }

        th {
            background-color: #424242;
            color: white;
        }

        input {
            border: 1px solid Green;
            height: inherit;
            background: White;
            margin: 0 0 10px 0;
        }
    </style>

    <button class="button" style="vertical-align:middle"
            onclick="@{
                Hash();
        }">
        Encrypt
    </button>
    <table>
        <tr>
            <th>Hash type</th>
            <th>Initial value</th>
            <th>Encyption</th>
        </tr>
        <tr>
            <td>MD5</td>
            <td>@value</td>
            <td>@MD5Hashed</td>
        </tr>
        <tr>
            <td>SHA-256</td>
            <td>@value</td>
            <td>@SHA256Hashed</td>
        </tr>

        <tr>
            <td>SHA-512</td>
            <td>@value</td>
            <td>@SHA512Hashed</td>
        </tr>

    </table>

</div>
@functions {

public string value;
public string SHA256Hashed = "";
public string SHA512Hashed = "";
public string MD5Hashed = "";
public void Hash()
{

    //MD5
    using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())
    {
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(value);
        byte[] hashBytes = md5.ComputeHash(inputBytes);

        // Convert the byte array to hexadecimal string
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        for (int i = 0; i < hashBytes.Length; i++)
        {
            sb.Append(hashBytes[i].ToString("X2"));
        }
        MD5Hashed = sb.ToString();
    }


    //SHA256
    {
        System.Text.StringBuilder Sb = new System.Text.StringBuilder();

        using (var hash = System.Security.Cryptography.SHA256.Create())
        {
            System.Text.Encoding enc = System.Text.Encoding.UTF8;
            Byte[] result = hash.ComputeHash(enc.GetBytes(value));

            foreach (Byte b in result)
            { Sb.Append(b.ToString("x2")); }
        }
        SHA256Hashed = Sb.ToString();
    }
    //SHA512
    {
        System.Text.StringBuilder Sb = new System.Text.StringBuilder();

        using (var hash = System.Security.Cryptography.SHA512.Create())
        {
            System.Text.Encoding enc = System.Text.Encoding.UTF8;
            Byte[] result = hash.ComputeHash(enc.GetBytes(value));

            foreach (Byte b in result)
            { Sb.Append(b.ToString("x2")); }
        }
        SHA512Hashed = Sb.ToString();
    }
}
}
